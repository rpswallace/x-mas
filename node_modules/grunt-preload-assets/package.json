{
  "name": "grunt-preload-assets",
  "description": "A Grunt plugin for making preload assets manifest. It supports any kind of output format by using templates.",
  "version": "0.2.1",
  "homepage": "https://github.com/gunta/grunt-preload-assets",
  "author": {
    "name": "Gunther Brunner",
    "email": "gunta85@gmail"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gunta/grunt-preload-assets.git"
  },
  "bugs": {
    "url": "https://github.com/gunta/grunt-preload-assets/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/gunta/grunt-preload-assets/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.0",
    "execSync": "0.0.3"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "preloadjs",
    "preload",
    "manifest",
    "pxloader",
    "generator"
  ],
  "readme": "# grunt-preload-assets\n\n> A Grunt plugin for generating preload assets manifest files.\t\n> Supports [PreloadJS](http://www.createjs.com/#!/PreloadJS), [PxLoader](http://thinkpixellab.com/pxloader/), JSON, JS, CSV, and unlimited support for multiple formats by using [underscore templates](http://www.2ality.com/2012/06/underscore-templates.html).\n> By [@gunta](https://github.com/gunta/).\n\n\n\n![image](http://gunta.github.com/grunt-preload-assets/images/grunt-preload-assets-logo.jpg)\n\n\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-preload-assets --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-preload-assets');\n```\n\n## Preload Assets task\n_Run this task with the `grunt preload_assets` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\n### Options\n\n#### template\nType: `String`\t\nChoices: \t\n\n* `preloadjs`\n* `pxloader`\n* `json`\n* `json-idaskey`\n* `csv`\n* `custom-sample`\n* Or a path to a template file.\t\t\n\nDefault: `json`\n\nSelects a template for generating the assets list.\nThe output can be customized by creating your own [underscore template](http://www.2ality.com/2012/06/underscore-templates.html). \n\n\n### Detecting options\n\n####detectId\nType: `Boolean`\t\t\nDefault: `true`\n\nIncludes an **identifier** in the output. \t\nBy default, it **camelizes the filename and removes the extension**.\n\t\n####detectSrc\nType: `Boolean`\t\t\nDefault: `true`\n\nIncludes the file path.\n\t\n####detectType\nType: `Boolean`\t\t\nDefault: `true`\n\nAnalyzes each asset file type and includes it. \t\nBy default, the supported file types are `IMAGE` `SOUND` `JSON` `XML` `CSS` `JAVASCRIPT` `SVG` and `TEXT`.\n\t\n####detectBytes\t\nType: `Boolean`\t\t\nDefault: `false`\t\n\nIncludes each asset file size **in bytes**.\t\t\nUseful when creating realistic progress bars.\n\t\n####detectTotalBytes\t\nType: `Boolean`\t\t\nDefault: `false`\t\n\nIncludes the sum of all assets file sizes **in bytes**. \t\nUseful when creating realistic progress bars.\n\n####detectLastModified\t\nType: `Boolean`\t\t\nDefault: `false`\t\n\nIncludes each asset file last modified timestamp **in unixtime**. \t\nUseful when comparing file changes or implementing a cache system.\n\n####detectMD5\t\nType: `Boolean`\t\t\nDefault: `false`\t\n\nIncludes each asset file **md5 hash** trimmed to the first **8 chars**.\t\t\nUseful when creating a cache system more reliable than one based on timestamps or checking integrity. \n\n####detectBase64\t\nType: `Boolean`\t\t\nDefault: `false`\t\n\nIncludes each entire asset file encoded in a **base64 string**.\t\t\nUseful when the asset file sizes are small, to reduce http requests.\n\n####detectDimensions\t\nType: `Boolean`\t\t\nDefault: `false`\t\n\nFor `IMAGE` files: Includes each asset file `width` and `height` **in pixels**.\t\t\nUseful so one doesn't need to manually write the width/height everytime for each file.\n\n*Currently this only works on OS X (Waiting your pull request)* ðŸ˜‰\n\t\n*Note that not every template needs to add support to all these properties.*\n\t\n\n### Advanced Options\n\n#### key\nType: `String`\t\nDefault: `filesManifest`\n\nSpecifies a key name for the root container.\n\n####ignoreBasePath\nType: `String`\t\nDefault: `undefined`\n\nIgnores a specific base path from the specified `src`.\n\n#### processSrc\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the src filename.\n\n#### processId\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the id.\n\n#### processType\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the file type.\n\n#### processBytes\nType: `Function`\t\nParameter: `Number` bytes\n\nOverrides the function for processing the number of bytes.\n\n#### processTotalBytes\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the number of total bytes.\n\n#### processDimensions\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the dimensions of the file.\n\n#### processMD5\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the md5 hash for the file.\n\n#### processLastModified\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the last modified date.\n\n#### processBase64\nType: `Function`\t\nParameter: `String` filename\n\nOverrides the function for processing the base64 encode of the file.\n\n\n## Usage examples\n\n### Basic usage\n\n```js\n// Project configuration.\ngrunt.initConfig({\n\tpreload_assets: {\n\t\tmy_target: {\n\t\t\tfiles: {\n\t\t\t\t'dest/filesmanifest.js': ['src/*.png', 'src/*.jpg']\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\nWill produce something like this:\n\n```json\n{\n\t\"filesManifest\": {\n\t\t\"files\": [\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesGenericButton\",\n\t\t\t    \"src\": \"test/fixtures/genericButton.png\",\n\t\t\t    \"type\": \"IMAGE\"\n\t        },\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesGenericButtonOver\",\n\t\t\t    \"src\": \"test/fixtures/genericButtonOver.png\",\n\t\t\t    \"type\": \"IMAGE\"\n\t        },\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesParallaxHill1\",\n\t\t\t    \"src\": \"test/fixtures/parallaxHill1.png\",\n\t\t\t    \"type\": \"IMAGE\"\n\t        },\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesSky\",\n\t\t\t    \"src\": \"test/fixtures/sky.png\",\n\t\t\t    \"type\": \"IMAGE\"\n\t        },\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesImage2\",\n\t\t\t    \"src\": \"test/fixtures/image2.jpg\",\n\t\t\t    \"type\": \"IMAGE\"\n\t        }\n        ]\n    }\n}\n```\n\n### PreloadJS sample\n\n```js\n// Project configuration.\ngrunt.initConfig({\n\tpreload_assets: {\n\t\tmy_target: {\n\t\t\toptions: {\n\t\t\t\tignoreBasePath: 'somebasepath/path/',\n\t\t\t\ttemplate: 'preloadjs'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'dest/filesmanifest.js': ['somebasepath/path/*.png', 'somebasepath/path/*.jpg']\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\nWill produce this:\n\n```js\nvar filesManifest = [\n\t{id: 'genericButton', src: 'genericButton.png', type: createjs.LoadQueue.IMAGE},\n\t{id: 'genericButtonOver', src: 'genericButtonOver.png', type: createjs.LoadQueue.IMAGE},\n\t{id: 'parallaxHill1', src: 'parallaxHill1.png', type: createjs.LoadQueue.IMAGE},\n\t{id: 'sky', src: 'sky.png', type: createjs.LoadQueue.IMAGE},\n\t{id: 'image2', src: 'image2.jpg', type: createjs.LoadQueue.IMAGE}\n];\n```\n\n### JSON full options sample\n\n```js\n// Project configuration.\ngrunt.initConfig({\n\tpreload_assets: {\n\t\tmy_target: {\n\t\t\toptions: {\n\t\t\t\ttemplate: 'json',\n\t\t\t\tdetectId: true,\n\t\t\t\tdetectBytes: true,\n\t\t\t\tdetectTotalBytes: true,\n\t\t\t\tdetectSrc: true,\n\t\t\t\tdetectLastModified: false,\n\t\t\t\tdetectMD5: true,\n\t\t\t\tdetectBase64: true,\n\t\t\t\tdetectDimensions: true\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'dest/filesmanifest.js': ['test/fixtures/*.*']\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\nWill produce this:\n\n```json\n{\n\t\"filesManifest\": {\n\t\t\"files\": [\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesCabinBoy\",\n\t\t\t    \"src\": \"test/fixtures/CabinBoy.mp3\",\n\t\t\t    \"bytes\": 9529,\n\t\t\t    \"md5\": \"bc1d817c\",\n                \"base64\": \"SUQzAwAAAAAlH1RSUQzAwAAAAAlH1RZRVIMjAxMC0xMC0yMlQxwNjowM...\",\n                \"lastModified\": 1363601857000\n\t        },\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesThunder\",\n\t\t\t    \"src\": \"test/fixtures/Thunder.ogg\",\n\t\t\t    \"bytes\": 71083,\n\t\t\t    \"md5\": \"076b3c87\",\n\t\t\t    \"base64\": \"1RZRVIAAAAaAASUQzAwAAAAAlH1RZRVIAAAAaAAAAMjAxMC0xMC0ywNjowM...\",\n                \"lastModified\": 1363601857000\n\t        },\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesFont\",\n\t\t\t    \"src\": \"test/fixtures/font.css\",\n\t\t\t    \"bytes\": 37,\n\t\t\t    \"md5\": \"34b228cf\",\n                \"base64\": \"ZGl2IHsKICAgY29sb3I6ICMyNMC0xmIzZjggIWltcG9ydGFudDsKfQ...\",\n                \"lastModified\": 1363601857000\n\t        },\n\t\t\t{\n\t\t\t\t\"id\": \"testFixturesGenericButton\",\n\t\t\t    \"src\": \"test/fixtures/genericButton.png\",\n\t\t\t    \"bytes\": 2832,\n\t\t\t    \"width\": 150,\n                \"height\": 100,\n                \"md5\": \"7a36698a\",\n                \"base64\": \"iVBONvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2FTkSuQmCC...\"\n\t        },\n\t\t\t{\n\t\t\t\t\"...\": \"............\"\n\t\t\t}\n        ],\n        \"totalBytes\": 206944\n    }\n}\n```\n\n### CSV options sample\n\n```js\n// Project configuration.\ngrunt.initConfig({\n\tpreload_assets: {\n\t\tmy_target: {\n\t\t\toptions: {\n\t\t\t\t\ttemplate: 'csv'\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'dest/filesmanifest.csv': ['test/fixtures/*.*']\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\nWill produce this:\n\n```csv\ntest/fixtures/CabinBoy.mp3,test/fixtures/Thunder.ogg,test/fixtures/font.css,test/fixtures/gbot.svg,test/fixtures/genericButton.png,test/fixtures/genericButtonOver.png,test/fixtures/grant.json,test/fixtures/grant.xml,test/fixtures/image2.jpg,test/fixtures/loader.gif,test/fixtures/parallaxHill1.png,test/fixtures/sky.png\n```\n\n\n\n## Release History\n\n### 0.2.1\n- Updated package information\n\n### 0.2.0\n- First NPM package release\n\n### 0.1.2\n- Changed option parameters to a single hash because they would be overridden with a new object if passed\n- Changed idaskey to hash for better naming\n- Added bytes to PreloadJS template\n\n### 0.1.1\n\n- Added timestamp support\n- Added base64 support\n- Added md5 support\n- Added flag for optional switching of options\n- Added JSON template, with key and array version\n- Added CSV support\n- Added totalBytes support\n- Replaced lodash with grunt.util._\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-preload-assets@0.2.1",
  "dist": {
    "shasum": "b05f6701017211cfc4dd6b11c7a53fbf4afbe273",
    "tarball": "http://registry.npmjs.org/grunt-preload-assets/-/grunt-preload-assets-0.2.1.tgz"
  },
  "_from": "grunt-preload-assets@",
  "_npmVersion": "1.2.18",
  "_npmUser": {
    "name": "gunta",
    "email": "takeshimiya@gmail.com"
  },
  "maintainers": [
    {
      "name": "gunta",
      "email": "takeshimiya@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "b05f6701017211cfc4dd6b11c7a53fbf4afbe273",
  "_resolved": "https://registry.npmjs.org/grunt-preload-assets/-/grunt-preload-assets-0.2.1.tgz"
}
